use std::str::FromStr;

use crate::ast::program_node::ProgramNode;
use crate::ast::binary_op_node::{BinaryOperation, BinaryOpNode};
use crate::ast::expression_node::ExpressionNode;
use crate::ast::function_def_node::FunctionDefNode;
use crate::ast::int_node::IntNode;
use crate::ast::call_node::CallNode;
use crate::ast::return_node::ReturnNode;
use crate::ast::decl_node::DeclNode;
use crate::ast::var_init_node::VarInitNode;
use crate::semantic::lpc_type::{LPCVarType, LPCReturnType};
use crate::ast::ast_node::ASTNode;

grammar;

match {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*([^*]*\*+[^*/])*([^*]*\*+|[^*])*\*/" => { },  // Skip `/* comments */`
    _ // let everything else through
}

SemiSeq<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Program: ProgramNode = <functions:FunctionDef*> => ProgramNode {
    functions
};

pub FunctionDef: FunctionDefNode = {
    <r_type:ReturnType?> <star:"*"?> <name:ID> "(" ")" "{" <body:SemiSeq<Statement>> "}" => {
        let array = star.is_some();

        let return_type = if let Some(this_type) = r_type {
            match this_type.as_str() {
                "int" => LPCReturnType::Int(array),
                _ => unimplemented!()
            }
        } else {
            LPCReturnType::Int(array)
        };

        FunctionDefNode {
            name,
            body,
            return_type
        }
    }
};

ReturnType: String = "int" => String::from(<>);
VarType: String = "int" => String::from(<>);

pub Statement: ASTNode = {
    <Expression> => ASTNode::from(<>),
    <Return> => ASTNode::from(<>),
    <Decl> => ASTNode::from(<>)
};

VarInit: VarInitNode = {
    <array:"*"?> <name:ID> <value:("=" <Expression>)?> => {
        VarInitNode {
            type_: LPCVarType::Int, // placeholder. Corrected in Decl.
            name,
            value,
            array: array.is_some()
        }
    }
}

pub Decl: DeclNode = {
    <var_type:VarType> <init:VarInit> <optional:("," <VarInit>)*> => {
        let mut initializations = vec![init];

        initializations.append(optional.to_vec().as_mut());

        let new_type = LPCVarType::from(var_type);

        // Update each VarInitNode with the correct type.
        for init in &mut initializations {
            init.type_ = new_type
        }

        DeclNode {
            type_: new_type,
            initializations
        }
    }
}

pub Expression: ExpressionNode = {
    Call => ExpressionNode::Call(<>),
    <AdditiveBinaryExpression>,
    <Factor>
};

pub Return: ReturnNode = {
    "return" => ReturnNode::new(None),
    "return" <Expression> => ReturnNode::new(Some(<>))
}

pub Factor: ExpressionNode = {
    <MultiplicitiveBinaryExpression>,
    <Term>
};

pub AdditiveBinaryExpression: ExpressionNode = {
    <l:Expression> <op:AdditiveBinaryOp> <r:Factor> => {
        ExpressionNode::BinaryOp(BinaryOpNode { l: Box::new(l), r: Box::new(r), op })
    }
};

pub MultiplicitiveBinaryExpression: ExpressionNode = {
    <l:Factor> <op:MultiplicitiveBinaryOp> <r:Term> => {
        ExpressionNode::BinaryOp(BinaryOpNode { l: Box::new(l), r: Box::new(r), op })
    },
};

pub Call: CallNode = {
    <id:ID> "(" <e:Expression?> ")" => {
        let arguments = match e {
            Some(expr) => vec![expr],
            None => vec![]
        };

        CallNode {
            arguments,
            id
        }
    }
};

AdditiveBinaryOp: BinaryOperation = {
    "+" => BinaryOperation::Add,
    "-" => BinaryOperation::Sub
};

MultiplicitiveBinaryOp: BinaryOperation = {
    "*" => BinaryOperation::Mul,
    "/" => BinaryOperation::Div
};

Term: ExpressionNode = {
    <Int>,
    "(" <Expression> ")",
};

Int: ExpressionNode = <s:r"-?[0-9]+"> => ExpressionNode::Int(
    IntNode {
        value: i64::from_str(s).unwrap()
    }
);

ID: String = r"[\p{Alphabetic}_]\w*" => String::from(<>);