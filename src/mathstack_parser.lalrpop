use std::str::FromStr;

use crate::ast::program_node::ProgramNode;
use crate::ast::binary_op_node::{BinaryOperation, BinaryOpNode};
use crate::ast::expression_node::ExpressionNode;
use crate::ast::function_def_node::FunctionDefNode;
use crate::ast::int_node::IntNode;
use crate::ast::call_node::CallNode;
use crate::ast::return_node::ReturnNode;
use crate::ast::decl_node::DeclNode;
use crate::ast::var_init_node::VarInitNode;
use crate::ast::var_node::VarNode;
use crate::ast::string_node::StringNode;
use crate::ast::assignment_node::{AssignmentOperation, AssignmentNode};
use crate::semantic::lpc_type::{LPCVarType, LPCReturnType};
use crate::ast::ast_node::ASTNode;

grammar;

match {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*([^*]*\*+[^*/])*([^*]*\*+|[^*])*\*/" => { },  // Skip `/* comments */`
    _ // let everything else through
}

SemiSeq<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Program: ProgramNode = <functions:FunctionDef*> => ProgramNode {
    functions
};

pub FunctionDef: FunctionDefNode = {
    <r_type:ReturnType?> <star:"*"?> <name:ID> <parameters:Parameters> "{" <body:SemiSeq<Statement>> "}" => {
        let array = star.is_some();

        let return_type = if let Some(this_type) = r_type {
            match this_type.as_str() {
                "int" => LPCReturnType::Int(array),
                "string" => LPCReturnType::String(array),
                _ => unimplemented!()
            }
        } else {
            LPCReturnType::Int(array)
        };

        FunctionDefNode {
            name,
            parameters,
            body,
            return_type
        }
    }
};

Parameters: Vec<VarInitNode> = {
    "(" <parm:Parameter?> ")" => {
        parm.unwrap_or(vec![])
    }
};

Parameter: Vec<VarInitNode> = {
    <parms:ParameterList> <ellipsis:("," "...")?> => {
        parms
    }
};

ParameterList: Vec<VarInitNode> = {
    <list:(<ParameterList> ",")?> <name:ArgName> => {
        println!("parmlist {:?}", list);
        let mut v = list.unwrap_or(vec![]);
        v.push(name);
        v
    }
};

ArgName: VarInitNode = {
    <var_type:VarType> <mut init:VarInit> => {
        let new_type = LPCVarType::from(var_type);

        init.type_ = new_type;

        init
    }
};

ReturnType: String = {
    "int" => String::from(<>),
    "string" => String::from(<>)
};

VarType: String = {
    "int" => String::from(<>),
    "string" => String::from(<>)
};

pub Statement: ASTNode = {
    <Expression> => ASTNode::from(<>),
    <Return> => ASTNode::from(<>),
    <Decl> => ASTNode::from(<>)
};

VarInit: VarInitNode = {
    <array:"*"?> <name:ID> <value:("=" <AssignmentExpression>)?> => {
        VarInitNode {
            type_: LPCVarType::Int, // placeholder. Corrected in Decl.
            name,
            value,
            array: array.is_some()
        }
    }
}

pub Decl: DeclNode = {
    <var_type:VarType> <init:VarInit> <optional:("," <VarInit>)*> => {
        let mut initializations = vec![init];

        initializations.append(optional.to_vec().as_mut());

        let new_type = LPCVarType::from(var_type);

        // Update each VarInitNode with the correct type.
        for init in &mut initializations {
            init.type_ = new_type
        }

        DeclNode {
            type_: new_type,
            initializations
        }
    }
}

pub PrimaryExpression: ExpressionNode = {
    <Int>,
    <String>,
    <Var>,
    "(" <Expression> ")"
};

pub PostfixExpression: ExpressionNode = {
    <PrimaryExpression>,
    Call => ExpressionNode::Call(<>)
};

pub UnaryExpression: ExpressionNode = {
    <PostfixExpression>,
};

pub CastExpression: ExpressionNode = {
    <UnaryExpression>,
}

pub MultiplicitiveExpression: ExpressionNode = {
    <CastExpression>,
    <l:MultiplicitiveExpression> <op:MultiplicitiveBinaryOp> <r:CastExpression> => {
        ExpressionNode::BinaryOp(BinaryOpNode { l: Box::new(l), r: Box::new(r), op })
    },
};

pub AdditiveExpression: ExpressionNode = {
    <MultiplicitiveExpression>,
    <l:AdditiveExpression> <op:AdditiveBinaryOp> <r:MultiplicitiveExpression> => {
        ExpressionNode::BinaryOp(BinaryOpNode { l: Box::new(l), r: Box::new(r), op })
    }
};

pub ShiftExpression: ExpressionNode = {
    <AdditiveExpression>,
};

pub RelationalExpression: ExpressionNode = {
    <ShiftExpression>
};

pub EqualityExpression: ExpressionNode = {
    <RelationalExpression>
};

pub AndExpression: ExpressionNode = {
    <EqualityExpression>
};

pub ExclusiveOrExpression: ExpressionNode = {
    <AndExpression>
};

pub OrExpression: ExpressionNode = {
    <ExclusiveOrExpression>
};

pub LogicalAndExpression: ExpressionNode = {
    <OrExpression>
};

pub LogicalOrExpression: ExpressionNode = {
    <LogicalAndExpression>
};

pub ConditionalExpression: ExpressionNode = {
    <LogicalOrExpression>
};

AssignmentExpression: ExpressionNode = {
    <ConditionalExpression>,
    <lhs:UnaryExpression> <op:AssignmentOp> <rhs:AssignmentExpression> => ExpressionNode::Assignment(AssignmentNode {
        lhs: Box::new(lhs),
        rhs: Box::new(rhs),
        op
    })
};

pub Expression: ExpressionNode = {
    <AssignmentExpression>
};

pub Return: ReturnNode = {
    "return" => ReturnNode::new(None),
    "return" <Expression> => ReturnNode::new(Some(<>))
}

ArgumentExpressionList: Vec<ExpressionNode> = {
    <AssignmentExpression> => vec![<>],
    <list:ArgumentExpressionList> "," <arg:AssignmentExpression> => {
        let mut v = list;
        v.push(arg);
        v
    }
};

pub Call: CallNode = {
    <id:ID> "(" <list:ArgumentExpressionList?> ")" => {
        let arguments = match list {
            Some(args) => args,
            None => vec![]
        };

        CallNode {
            arguments,
            id
        }
    }
};

AssignmentOp: AssignmentOperation = {
    "=" => AssignmentOperation::Simple
};

AdditiveBinaryOp: BinaryOperation = {
    "+" => BinaryOperation::Add,
    "-" => BinaryOperation::Sub
};

MultiplicitiveBinaryOp: BinaryOperation = {
    "*" => BinaryOperation::Mul,
    "/" => BinaryOperation::Div
};

Var: ExpressionNode = <value:ID> => ExpressionNode::Var(
    VarNode {
        value
    }
);

Int: ExpressionNode = <s:r"-?[0-9]+"> => ExpressionNode::Int(
    IntNode {
        value: i64::from_str(s).unwrap()
    }
);

String: ExpressionNode = {
    <StringLiteral> => {
        ExpressionNode::String(
            StringNode {
                value: <>
            }
        )
    },
    <s1:StringLiteral> <s2:String> => {
        match s2 {
            ExpressionNode::String(node) => {
                ExpressionNode::String(StringNode {
                    value: s1 + &node.value
                })
            }
            _ => unimplemented!()
        }
    },
};

StringLiteral: String = <s:r#""(\\.|[^"])*""#> => {
        // Strip the quotes at each end.
        let value = if s.len() < 3 { "" } else { &s[1..=(s.len() - 2)] };

        value.to_string()
};

ID: String = r"[\p{Alphabetic}_]\w*" => String::from(<>);