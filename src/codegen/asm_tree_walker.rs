use std::collections::HashMap;

use multimap::MultiMap;

use tree_walker::TreeWalker;

use crate::{
    asm::{
        instruction::{Address, Instruction},
        register::Register,
        register_counter::RegisterCounter,
    },
    ast::{
        array_node::ArrayNode,
        assignment_node::AssignmentNode,
        ast_node::{AstNodeTrait, SpannedNode},
        binary_op_node::{BinaryOpNode, BinaryOperation},
        block_node::BlockNode,
        call_node::CallNode,
        decl_node::DeclNode,
        expression_node::ExpressionNode,
        float_node::FloatNode,
        function_def_node::FunctionDefNode,
        if_node::IfNode,
        int_node::IntNode,
        mapping_node::MappingNode,
        program_node::ProgramNode,
        range_node::RangeNode,
        return_node::ReturnNode,
        string_node::StringNode,
        unary_op_node::{UnaryOpNode, UnaryOperation},
        var_init_node::VarInitNode,
        var_node::VarNode,
        while_node::WhileNode,
    },
    codegen::{tree_walker, tree_walker::ContextHolder},
    context::Context,
    errors::LpcError,
    interpreter::program::Program,
    parser::span::Span,
    semantic::{function_symbol::FunctionSymbol, lpc_type::LpcType, symbol::Symbol},
    Result,
};

use crate::ast::{do_while_node::DoWhileNode, for_node::ForNode};

macro_rules! push_instruction {
    ($slf:expr, $inst:expr, $span:expr) => {
        $slf.instructions.push($inst);
        $slf.debug_spans.push($span);
    };
}

/// Partition on whether the value is stored in registers or memory, to help select instructions.
/// tl;dr - Value types use `Register`, while reference types use `Memory`.
enum OperationType {
    Register,
    Memory,
}

/// A tree walker that generates assembly language instructions based on an AST.
#[derive(Debug, Default)]
pub struct AsmTreeWalker {
    /// The vector of instructions generated by this walker
    pub instructions: Vec<Instruction>,

    /// Code spans, corresponding to the instructions, for use in runtime error messaging
    debug_spans: Vec<Option<Span>>,

    /// The map of labels, to their respective addresses
    pub labels: HashMap<String, Address>,

    /// counter for labels, as they need to be unique.
    label_count: usize,

    /// The map of function Symbols, to their respective addresses
    pub functions: HashMap<FunctionSymbol, Address>,

    /// Track where the result of a child branch is
    current_result: Register,

    /// The internal counter to track which registers are used.
    register_counter: RegisterCounter,

    /// The counter for tracking globals
    global_counter: RegisterCounter,

    /// The compilation context
    context: Context,
}

impl AsmTreeWalker {
    /// Create a new [`AsmTreeWalker`] that consumes the passed scopes
    ///
    /// # Arguments
    /// `context` - The [`Context`] state that this tree walker will use for its internal workings.
    pub fn new(context: Context) -> Self {
        Self {
            context,
            ..Self::default()
        }
    }

    /// Get a listing of a translated AST, suitable for printing
    ///
    /// # Examples
    /// ```
    /// use lpc_rs::ast::binary_op_node::{BinaryOpNode, BinaryOperation};
    /// use lpc_rs::ast::int_node::IntNode;
    /// use lpc_rs::ast::expression_node::ExpressionNode;
    /// use lpc_rs::codegen::asm_tree_walker::AsmTreeWalker;
    /// use lpc_rs::codegen::tree_walker::TreeWalker;
    ///
    /// let mut node = BinaryOpNode {
    ///     l: Box::new(ExpressionNode::Int(IntNode::new(123))),
    ///     r: Box::new(ExpressionNode::Int(IntNode::new(456))),
    ///     op: BinaryOperation::Sub,
    ///     span: None
    /// };
    /// let mut walker = AsmTreeWalker::default();
    ///
    /// walker.visit_binary_op(&mut node);
    ///
    /// for instruction in walker.listing() {
    ///     println!("{}", instruction);
    /// }
    /// ```
    pub fn listing(&self) -> Vec<String> {
        let mut v = vec![];

        // invert these maps for by-address lookup
        let functions_by_pc = self
            .functions
            .values()
            .zip(self.functions.keys())
            .collect::<HashMap<_, _>>();

        // use MultiMap as multiple labels can be at the same address
        let labels_by_pc = self
            .labels
            .values()
            .zip(self.labels.keys())
            .collect::<MultiMap<_, _>>();

        for (counter, instruction) in self.instructions.iter().enumerate() {
            if let Some(sym) = functions_by_pc.get(&counter) {
                v.push(format!(
                    "fn {} num_args={} num_locals={}:",
                    sym.name, sym.num_args, sym.num_locals
                ));
            }
            if let Some(vec) = labels_by_pc.get_vec(&counter) {
                for label in vec {
                    v.push(format!("{}:", label));
                }
            }
            v.push(format!("    {}", instruction));
        }

        v
    }

    /// Return a map of function names to their corresponding full symbol
    pub fn function_map(&self) -> HashMap<String, FunctionSymbol> {
        let mut map = HashMap::new();

        for sym in self.functions.keys() {
            map.insert(sym.name.clone(), sym.clone());
        }

        map
    }

    /// Convert this walker's data into a [`Program`]
    pub fn to_program(&self) -> Result<Program> {
        // These are expected and assumed to be in 1:1 correspondence at runtime
        self.ensure_sync()?;

        Ok(Program {
            instructions: self.instructions.clone(),
            debug_spans: self.debug_spans.clone(),
            filename: self.context.filename.clone(),
            labels: self.labels.clone(),
            functions: self.function_map(),
            num_globals: self.global_counter.get_count(),
        })
    }

    fn ensure_sync(&self) -> Result<()> {
        let a = self.instructions.len();
        let b = self.debug_spans.len();
        if a != b {
            return Err(LpcError::new(format!(
                "Instructions (length {}) and debug_spans (length {}) are out \
                        of sync. This would be catastrophic at runtime, and indicates \
                        a major bug in the code generator.",
                a, b
            )));
        }

        Ok(())
    }

    /// Get a reference to a symbol in the current scope
    fn lookup_symbol(&self, name: &str) -> Option<&Symbol> {
        self.context.scopes.lookup(name)
    }

    /// Get a mutable reference to a symbol in the current scope
    fn lookup_symbol_mut(&mut self, name: &str) -> Option<&mut Symbol> {
        self.context.scopes.lookup_mut(name)
    }

    /// Check for a symbol in the global scope
    fn lookup_global(&self, name: &str) -> Option<&Symbol> {
        self.context.scopes.lookup_global(name)
    }

    /// encapsulate vars that can find themselves if they're global
    fn lookup_var_symbol(&self, node: &VarNode) -> Option<&Symbol> {
        if node.global {
            self.lookup_global(&node.name)
        } else {
            self.lookup_symbol(&node.name)
        }
    }

    /// helper to choose operation instructions
    fn to_operation_type(&self, node: &ExpressionNode) -> OperationType {
        match node {
            ExpressionNode::Int(_) |
            ExpressionNode::Float(_) => OperationType::Register,

            ExpressionNode::String(_) |
            ExpressionNode::Array(_) |
            ExpressionNode::Mapping(_) |
            // TODO: Calls can be optimized if we can get the return types available here
            ExpressionNode::Call(_) |
            ExpressionNode::CommaExpression(_) |
            ExpressionNode::Range(_) => OperationType::Memory,
            ExpressionNode::Assignment(node) => self.to_operation_type(&node.lhs),
            ExpressionNode::BinaryOp(node) => {
                let left_type = self.to_operation_type(&node.l);
                let right_type = self.to_operation_type(&node.r);
                match (left_type, right_type) {
                    (OperationType::Register, OperationType::Register) => OperationType::Register,
                    _ => OperationType::Memory,
                }
            }
            ExpressionNode::UnaryOp(node) => {
                let expr_type = self.to_operation_type(&node.expr);

                if matches!(expr_type, OperationType::Register) {
                    OperationType::Register
                } else {
                    OperationType::Memory
                }
            }
            ExpressionNode::Var(v) => {
                match self.lookup_var_symbol(&v) {
                    Some(Symbol { type_: ty, .. }) => {
                        match ty {
                            LpcType::Int(false) => OperationType::Register,
                            LpcType::Float(false) => OperationType::Register,
                            _ => OperationType::Memory,
                        }
                    }
                    None => OperationType::Memory // arbitrary - doing this instead of panicking
                }
            }
        }
    }

    /// The main switch to determine which instruction we select for a binary operation
    fn choose_op_instruction(
        &self,
        node: &BinaryOpNode,
        reg_left: Register,
        reg_right: Register,
        reg_result: Register,
    ) -> Instruction {
        match node.op {
            BinaryOperation::Add => self.choose_num_or_mixed(
                &node,
                || Instruction::IAdd(reg_left, reg_right, reg_result),
                || Instruction::MAdd(reg_left, reg_right, reg_result),
            ),
            BinaryOperation::Sub => self.choose_num_or_mixed(
                &node,
                || Instruction::ISub(reg_left, reg_right, reg_result),
                || Instruction::MSub(reg_left, reg_right, reg_result),
            ),
            BinaryOperation::Mul => self.choose_num_or_mixed(
                &node,
                || Instruction::IMul(reg_left, reg_right, reg_result),
                || Instruction::MMul(reg_left, reg_right, reg_result),
            ),
            BinaryOperation::Div => Instruction::IDiv(reg_left, reg_right, reg_result),
            BinaryOperation::Index => Instruction::Load(reg_left, reg_right, reg_result),
            BinaryOperation::AndAnd => todo!(),
            BinaryOperation::OrOr => todo!(),
            BinaryOperation::EqEq => Instruction::EqEq(reg_left, reg_right, reg_result),
            BinaryOperation::Lt => Instruction::Lt(reg_left, reg_right, reg_result),
            BinaryOperation::Lte => Instruction::Lte(reg_left, reg_right, reg_result),
            BinaryOperation::Gt => Instruction::Gt(reg_left, reg_right, reg_result),
            BinaryOperation::Gte => Instruction::Gte(reg_left, reg_right, reg_result),
        }
    }

    /// Allows for recursive determination of typed binary operator instructions, allowing
    /// choice between a numeric (i.e. held in registers) and mixed (i.e. tracked via references)
    /// Switching on the instructions lets us avoid some value lookups at runtime.
    fn choose_num_or_mixed<F, G>(&self, node: &BinaryOpNode, a: F, b: G) -> Instruction
    where
        F: Fn() -> Instruction,
        G: Fn() -> Instruction,
    {
        let left_type = self.to_operation_type(&node.l);
        let right_type = self.to_operation_type(&node.r);

        match (left_type, right_type) {
            (OperationType::Register, OperationType::Register) => a(),
            _ => b(),
        }
    }

    /// A special case for function def parameters, where we don't want to generate code
    /// for default arguments - we just want to have it on hand to refer to
    /// when we generate code for calls.
    fn visit_parameter(&mut self, node: &VarInitNode) {
        let current_register;

        current_register = self.register_counter.next().unwrap();

        let symbol = self.lookup_symbol_mut(&node.name);
        if let Some(sym) = symbol {
            sym.location = Some(current_register);
        }
    }

    /// Emit the instruction(s) to take the range of an array
    /// # Arguments
    /// `array` - The register holding the reference to the array we're taking a slice from.
    /// `node` - A reference to the `RangeNode` that holds the range of the slice we're taking.
    fn emit_range(&mut self, array: Register, node: &mut RangeNode) -> Result<()> {
        let first_index = if let Some(expr) = &mut *node.l {
            expr.visit(self)?;
            self.current_result
        } else {
            // Default to 0. No instruction needed as the value in registers defaults to int 0.
            self.register_counter.next().unwrap()
        };

        let second_index = if let Some(expr) = &mut *node.r {
            expr.visit(self)?;
            self.current_result
        } else {
            // A missing range end means just go to the end of the array.
            let register = self.register_counter.next().unwrap();
            let instruction = Instruction::IConst(register, -1);
            self.instructions.push(instruction);
            self.debug_spans.push(node.span);
            register
        };

        let result = self.register_counter.next().unwrap();
        self.current_result = result;
        self.instructions.push(Instruction::ARange(
            array,
            first_index,
            second_index,
            result,
        ));
        self.debug_spans.push(node.span);

        Ok(())
    }

    /// Emit a numbered label with prefix `T`, tracking the current count.
    fn new_label<T>(&mut self, prefix: T) -> String
    where
        T: AsRef<str>,
    {
        let r = format!("{}_{}", prefix.as_ref(), self.label_count);
        self.label_count += 1;
        r
    }
}

impl ContextHolder for AsmTreeWalker {
    fn into_context(self) -> Context {
        self.context
    }
}

impl TreeWalker for AsmTreeWalker {
    fn visit_program(&mut self, program: &mut ProgramNode) -> Result<()> {
        self.context.scopes.goto_root();
        for expr in &mut program.body {
            expr.visit(self)?;
        }
        self.context.scopes.pop();

        Ok(())
    }

    fn visit_block(&mut self, node: &mut BlockNode) -> Result<()> {
        self.context.scopes.goto(node.scope_id);

        for stmt in &mut node.body {
            stmt.visit(self)?;
        }

        self.context.scopes.pop();
        Ok(())
    }

    fn visit_call(&mut self, node: &mut CallNode) -> Result<()> {
        let mut arg_results = vec![];

        let params = self.context.function_params.get(&node.name);

        if let Some(function_args) = params {
            let mut function_args = function_args.clone();

            for (idx, function_arg) in function_args.iter_mut().enumerate() {
                // use passed parameters, or default parameters if applicable.
                if let Some(arg) = node.arguments.get_mut(idx) {
                    arg.visit(self)?;
                    arg_results.push(self.current_result);
                } else if let Some(arg) = function_arg {
                    arg.visit(self)?;
                    arg_results.push(self.current_result);
                }
            }
        } else {
            // TODO: This is where efuns are handled
            for argument in &mut node.arguments {
                argument.visit(self)?;
                arg_results.push(self.current_result);
            }
        }

        let instruction = if arg_results.len() == 1 {
            // no need to serialize args for the `Call` instruction if there's only one.
            Instruction::Call {
                name: node.name.clone(),
                num_args: arg_results.len(),
                initial_arg: arg_results[0],
            }
        } else {
            let start_register = self.register_counter.next().unwrap();
            let mut register = start_register;

            // copy each result to the start of the arg register
            for result in &arg_results {
                self.instructions
                    .push(Instruction::RegCopy(*result, register));
                self.debug_spans.push(node.span);
                register = self.register_counter.next().unwrap();
            }

            // Undo the final call to .next() to avoid skipping a register
            self.register_counter.go_back();

            Instruction::Call {
                name: node.name.clone(),
                num_args: arg_results.len(),
                initial_arg: start_register,
            }
        };

        self.instructions.push(instruction);
        self.debug_spans.push(node.span);
        self.current_result = Register(0); // returned results are in r0

        Ok(())
    }

    fn visit_int(&mut self, node: &mut IntNode) -> Result<()> {
        let register = self.register_counter.next().unwrap();
        self.current_result = register;
        let instruction = match node.value {
            0 => Instruction::IConst0(register),
            1 => Instruction::IConst1(register),
            v => Instruction::IConst(register, v),
        };
        push_instruction!(self, instruction, node.span);

        Ok(())
    }

    fn visit_float(&mut self, node: &mut FloatNode) -> Result<()> {
        let register = self.register_counter.next().unwrap();
        self.current_result = register;
        let instruction = Instruction::FConst(self.current_result, node.value);
        push_instruction!(self, instruction, node.span);

        Ok(())
    }

    fn visit_string(&mut self, node: &mut StringNode) -> Result<()> {
        let register = self.register_counter.next().unwrap();
        self.current_result = register;

        push_instruction!(
            self,
            Instruction::SConst(register, node.value.clone()),
            node.span
        );

        Ok(())
    }

    fn visit_binary_op(&mut self, node: &mut BinaryOpNode) -> Result<()> {
        node.l.visit(self)?;
        let reg_left = self.current_result;

        // Ranges need special handling that complicates this function otherwise, due to
        // the visit to node.r needing to handle multiple results.
        if node.op == BinaryOperation::Index {
            if let ExpressionNode::Range(range_node) = &mut *node.r {
                self.emit_range(reg_left, range_node)?;
                return Ok(());
            }
        }

        node.r.visit(self)?;
        let reg_right = self.current_result;

        let reg_result = self.register_counter.next().unwrap();
        self.current_result = reg_result;

        let instruction = self.choose_op_instruction(node, reg_left, reg_right, reg_result);
        push_instruction!(self, instruction, node.span);

        Ok(())
    }

    fn visit_unary_op(&mut self, node: &mut UnaryOpNode) -> Result<()> {
        node.expr.visit(self)?;
        let reg_expr = self.current_result;

        self.current_result = match node.op {
            UnaryOperation::Negate => {
                // multiply by -1
                let reg = self.register_counter.next().unwrap();
                let instruction = Instruction::IConst(reg, -1);
                push_instruction!(self, instruction, node.span);

                let reg_result = self.register_counter.next().unwrap();

                let instruction = Instruction::MMul(reg_expr, reg, reg_result);
                push_instruction!(self, instruction, node.span);

                reg_result
            }
            UnaryOperation::Inc => todo!(),
            UnaryOperation::Dec => todo!(),
            UnaryOperation::Bang => todo!(),
            UnaryOperation::Tilde => todo!(),
        };

        Ok(())
    }

    fn visit_function_def(&mut self, node: &mut FunctionDefNode) -> Result<()> {
        let return_address = self.instructions.len();

        let len = self.instructions.len();
        self.context.scopes.goto_function(&node.name)?;
        self.register_counter.reset();

        for parameter in &node.parameters {
            self.visit_parameter(parameter);
        }

        for expression in &mut node.body {
            expression.visit(self)?;
        }

        // force a final return if one isn't already there.
        if self.instructions.len() == len
            || (!self.instructions.is_empty()
                && *self.instructions.last().unwrap() != Instruction::Ret)
        {
            // TODO: This should emit a warning unless the return type is void
            push_instruction!(self, Instruction::Ret, node.span);
        }

        self.context.scopes.pop();

        let num_args = node.parameters.len();
        self.functions.insert(
            FunctionSymbol {
                name: node.name.clone(),
                num_args,
                num_locals: self.register_counter.get_count() - num_args,
                address: return_address,
            },
            return_address,
        );

        Ok(())
    }

    fn visit_return(&mut self, node: &mut ReturnNode) -> Result<()> {
        if let Some(expression) = &mut node.value {
            expression.visit(self)?;
            let copy = Instruction::RegCopy(self.current_result, Register(0));
            push_instruction!(self, copy, expression.span());
        }

        push_instruction!(self, Instruction::Ret, node.span);

        Ok(())
    }

    fn visit_decl(&mut self, node: &mut DeclNode) -> Result<()> {
        for init in &mut node.initializations {
            self.visit_var_init(init)?;
        }

        Ok(())
    }

    fn visit_var_init(&mut self, node: &mut VarInitNode) -> Result<()> {
        let current_register;
        let symbol = self.lookup_symbol(&node.name);

        let sym = match symbol {
            Some(s) => s,
            None => {
                return Err(LpcError::new(format!(
                    "Missing symbol, that somehow passed semantic checks?: {}",
                    node.name
                ))
                .with_span(node.span))
            }
        };

        let global = sym.is_global();

        current_register = if let Some(expression) = &mut node.value {
            expression.visit(self)?;

            if matches!(expression, ExpressionNode::Var(_)) {
                // Copy to a new register so the new var isn't literally
                // sharing a register with the old one.
                let next_register = self.register_counter.next().unwrap();
                push_instruction!(
                    self,
                    Instruction::RegCopy(self.current_result, next_register),
                    node.span()
                );
                next_register
            } else {
                self.current_result
            }
        } else {
            // Default value to 0 when uninitialized.
            self.register_counter.next().unwrap()
        };

        if global {
            // Store the reference in the globals register.
            // Using next() means global r0 is never used,
            // but makes it possible to skip a bunch of conditionals.
            let dest_register = self.global_counter.next().unwrap();
            let instruction = Instruction::GStore(current_register, dest_register);
            push_instruction!(self, instruction, node.span);
        }

        let current_global_register = self.global_counter.current();
        let symbol = self.lookup_symbol_mut(&node.name);

        if let Some(sym) = symbol {
            if global {
                sym.location = Some(current_global_register);
                self.global_counter.next();
            } else {
                sym.location = Some(current_register);
            }
        }

        Ok(())
    }

    fn visit_var(&mut self, node: &mut VarNode) -> Result<()> {
        let sym = match self.lookup_var_symbol(node) {
            Some(s) => s,
            None => {
                return Err(
                    LpcError::new(format!("Unable to find symbol `{}`", node.name))
                        .with_span(node.span),
                );
            }
        };

        let sym_loc = match sym.location {
            Some(l) => l,
            None => {
                return Err(
                    LpcError::new(format!("Symbol `{}` has no location set.", sym.name))
                        .with_span(node.span),
                );
            }
        };

        if sym.is_global() {
            let result_register = self.register_counter.next().unwrap();
            let instruction = Instruction::GLoad(sym_loc, result_register);
            push_instruction!(self, instruction, node.span);

            self.current_result = result_register;
        } else {
            self.current_result = sym_loc;
        }

        Ok(())
    }

    fn visit_assignment(&mut self, node: &mut AssignmentNode) -> Result<()> {
        node.rhs.visit(self)?;
        let rhs_result = self.current_result;
        let lhs = &mut *node.lhs;

        match lhs.clone() {
            ExpressionNode::Var(VarNode { name, global, .. }) => {
                lhs.visit(self)?;
                let lhs_result = self.current_result;

                let assign = Instruction::RegCopy(rhs_result, lhs_result);

                push_instruction!(self, assign, node.span);

                // Copy over globals if necessary
                if global {
                    if let Some(Symbol {
                        scope_id: 0,
                        location: Some(register),
                        ..
                    }) = self.lookup_global(&name)
                    {
                        let store = Instruction::GStore(lhs_result, *register);
                        push_instruction!(self, store, node.span);
                    }
                }

                self.current_result = lhs_result;
            }
            ExpressionNode::BinaryOp(BinaryOpNode {
                op: BinaryOperation::Index,
                ref mut l,
                ref mut r,
                ..
            }) => {
                l.visit(self)?;
                let var_result = self.current_result;
                r.visit(self)?;
                let index_result = self.current_result;

                let store = Instruction::Store(rhs_result, var_result, index_result);

                push_instruction!(self, store, node.span);

                self.current_result = rhs_result;
            }
            x => {
                return Err(LpcError::new(format!(
                    "Attempt to assign to an invalid lvalue: `{}`",
                    x
                ))
                .with_span(node.span))
            }
        }

        Ok(())
    }

    fn visit_array(&mut self, node: &mut ArrayNode) -> Result<()> {
        let mut items = Vec::with_capacity(node.value.len());
        for member in &mut node.value {
            let _ = member.visit(self);
            items.push(self.current_result);
        }

        let register = self.register_counter.next().unwrap();
        self.current_result = register;
        push_instruction!(self, Instruction::AConst(register, items), node.span);

        Ok(())
    }

    fn visit_mapping(&mut self, node: &mut MappingNode) -> Result<()> {
        let mut map = HashMap::new();
        for (key, value) in &mut node.value {
            key.visit(self)?;
            let key_result = self.current_result;
            value.visit(self)?;

            map.insert(key_result, self.current_result);
        }

        let register = self.register_counter.next().unwrap();
        self.current_result = register;
        push_instruction!(self, Instruction::MapConst(register, map), node.span);

        Ok(())
    }

    fn visit_if(&mut self, node: &mut IfNode) -> Result<()> {
        self.context.scopes.goto(node.scope_id);
        let else_label = self.new_label("if-else");
        let end_label = self.new_label("if-end");

        // Visit the condition
        node.condition.visit(self)?;

        // stash some data, so we can update the instruction with the correct address
        let cond_result = self.current_result;
        let jz_index = self.instructions.len();

        // If the condition is false (i.e. equal to 0 or 0.0), jump to the end of the "then" body.
        // Insert a placeholder address, which we correct below after the body's code is generated
        let instruction = Instruction::Jz(cond_result, 0);
        push_instruction!(self, instruction, node.span);

        // Generate the main body of the statement
        node.body.visit(self)?;

        let mut jmp_index: Option<usize> = None;

        if node.else_clause.is_some() {
            // 0 is a placeholder, which is corrected further below
            let instruction = Instruction::Jmp(0);
            jmp_index = Some(self.instructions.len());
            push_instruction!(self, instruction, node.span);
        }

        // Correct the address in the `Jz` instruction generated above
        // now that the body code has been generated.
        let addr = self.instructions.len();
        self.labels.insert(else_label, addr);
        let else_instruction_replacement = Instruction::Jz(cond_result, addr);
        self.instructions[jz_index] = else_instruction_replacement;

        // Generate the else clause code if necessary
        if let Some(n) = &mut *node.else_clause {
            n.visit(self)?;

            let addr = self.instructions.len();
            self.labels.insert(end_label, addr);

            // Correct the address in the `Jmp` instruction above
            let jmp_instruction_replacement = Instruction::Jmp(addr);
            let idx = jmp_index.expect("There's an else clause, but no jmp_index was set?");
            self.instructions[idx] = jmp_instruction_replacement;
        }

        self.context.scopes.pop();
        Ok(())
    }

    fn visit_while(&mut self, node: &mut WhileNode) -> Result<()> {
        self.context.scopes.goto(node.scope_id);

        let start_label = self.new_label("while-start");
        let start_addr = self.instructions.len();
        self.labels.insert(start_label, start_addr);

        node.condition.visit(self)?;

        let cond_result = self.current_result;
        let jz_index = self.instructions.len();

        // Insert a placeholder address, which we correct below after the body's code is generated
        let instruction = Instruction::Jz(cond_result, 0);
        push_instruction!(self, instruction, node.span);

        node.body.visit(self)?;

        // go back to the start of the loop
        let instruction = Instruction::Jmp(start_addr);
        push_instruction!(self, instruction, node.span);

        // Correct the address in the `Jz` instruction generated above
        // now that the body code has been generated.
        let end_label = self.new_label("while-end");
        let addr = self.instructions.len();
        self.labels.insert(end_label, addr);
        let else_instruction_replacement = Instruction::Jz(cond_result, addr);
        self.instructions[jz_index] = else_instruction_replacement;

        self.context.scopes.pop();
        Ok(())
    }

    fn visit_do_while(&mut self, node: &mut DoWhileNode) -> Result<()> {
        self.context.scopes.goto(node.scope_id);

        let start_label = self.new_label("do-while-start");
        let start_addr = self.instructions.len();
        self.labels.insert(start_label, start_addr);

        node.body.visit(self)?;
        node.condition.visit(self)?;

        // Go back to the start of the loop if the result isn't zero
        let instruction = Instruction::Jnz(self.current_result, start_addr);
        push_instruction!(self, instruction, node.span);

        self.context.scopes.pop();
        Ok(())
    }

    fn visit_for(&mut self, node: &mut ForNode) -> Result<()> {
        self.context.scopes.goto(node.scope_id);

        if let Some(i) = &mut *node.initializer {
            i.visit(self)?;
        }

        let start_label = self.new_label("for-start");
        let start_addr = self.instructions.len();
        self.labels.insert(start_label, start_addr);

        let jz_tuple = if let Some(c) = &mut node.condition {
            c.visit(self)?;

            let cond_result = self.current_result;
            let jz_index = self.instructions.len();

            // Insert a placeholder address of 0, which is corrected later
            let instruction = Instruction::Jz(cond_result, 0);
            push_instruction!(self, instruction, c.span());

            Some((cond_result, jz_index))
        } else {
            None
        };

        node.body.visit(self)?;

        if let Some(i) = &mut node.incrementer {
            i.visit(self)?;
        }

        // go back to the start of the loop
        let instruction = Instruction::Jmp(start_addr);
        push_instruction!(self, instruction, node.span);

        if let Some((cond_result, jz_index)) = jz_tuple {
            // Correct the address in the `Jz` instruction generated above
            // now that the body code has been generated.
            let end_label = self.new_label("for-end");
            let addr = self.instructions.len();
            self.labels.insert(end_label, addr);
            let else_instruction_replacement = Instruction::Jz(cond_result, addr);
            self.instructions[jz_index] = else_instruction_replacement;
        }

        self.context.scopes.pop();
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use crate::{
        asm::instruction::Instruction::{
            AConst, Call, GLoad, GStore, IAdd, IConst, IConst0, IConst1, RegCopy, Ret, SConst,
            Store,
        },
        ast::{
            assignment_node::AssignmentOperation, ast_node::AstNode,
            comma_expression_node::CommaExpressionNode, expression_node::ExpressionNode,
        },
        codegen::scope_walker::ScopeWalker,
        compiler::preprocess_string,
        lpc_parser,
        parser::{
            lexer::{LexWrapper, TokenVecWrapper},
            span::Span,
        },
        semantic::lpc_type::LpcType,
        LpcFloat,
    };

    use super::*;
    use crate::asm::instruction::Address;

    #[test]
    fn test_walk_tree_populates_the_instructions() {
        let mut scope_walker = ScopeWalker::default();
        let program = "
            int main() {
                1 + 3 - 5;
                print(4 + 5);
            }
        ";

        let (code, _) = preprocess_string("foo.c", program).unwrap();

        let mut tree = lpc_parser::ProgramParser::new()
            .parse(TokenVecWrapper::new(&code))
            .unwrap();

        let _ = scope_walker.visit_program(&mut tree);
        let context = scope_walker.into_context();

        let mut walker = AsmTreeWalker::new(context);
        let _ = tree.visit(&mut walker);

        let expected = vec![
            IConst(Register(1), -1),
            IConst(Register(2), 9),
            Call {
                name: String::from("print"),
                num_args: 1,
                initial_arg: Register(2),
            },
            Ret, // Automatically added
        ];

        assert_eq!(walker.instructions, expected);
    }

    mod test_visit_call {
        use crate::asm::instruction::Instruction::Call;

        use super::*;

        #[test]
        fn test_visit_call_populates_the_instructions() {
            let mut walker = AsmTreeWalker::default();
            let call = "print(4 - 5)";
            let mut tree = lpc_parser::CallParser::new()
                .parse(LexWrapper::new(call))
                .unwrap();

            let _ = walker.visit_call(&mut tree);

            let expected = vec![
                IConst(Register(1), -1),
                Call {
                    name: String::from("print"),
                    num_args: 1,
                    initial_arg: Register(1),
                },
            ];

            assert_eq!(walker.instructions, expected);
        }

        #[test]
        fn test_visit_call_populates_the_instructions_with_defaults() {
            let mut function_params = HashMap::new();

            function_params.insert(
                String::from("foo"),
                vec![None, Some(ExpressionNode::from("muffuns"))],
            );

            let context = Context {
                function_params,
                ..Context::default()
            };

            let mut walker = AsmTreeWalker::new(context);
            let call = "foo(666)";
            let mut tree = lpc_parser::CallParser::new()
                .parse(LexWrapper::new(call))
                .unwrap();

            let _ = walker.visit_call(&mut tree);

            let expected = vec![
                IConst(Register(1), 666),
                SConst(Register(2), String::from("muffuns")),
                RegCopy(Register(1), Register(3)),
                RegCopy(Register(2), Register(4)),
                Call {
                    name: "foo".to_string(),
                    num_args: 2,
                    initial_arg: Register(3),
                },
            ];

            assert_eq!(walker.instructions, expected);
        }
    }

    #[test]
    fn test_visit_int_populates_the_instructions() {
        let mut walker = AsmTreeWalker::default();

        let mut tree = IntNode::new(666);
        let mut tree0 = IntNode::new(0);
        let mut tree1 = IntNode::new(1);

        let _ = walker.visit_int(&mut tree);
        let _ = walker.visit_int(&mut tree0);
        let _ = walker.visit_int(&mut tree1);

        let expected = vec![
            IConst(Register(1), 666),
            IConst0(Register(2)),
            IConst1(Register(3)),
        ];

        assert_eq!(walker.instructions, expected);
    }

    mod test_binary_op {
        use crate::asm::instruction::Instruction::{ARange, FConst, IConst0, IMul, Load, MAdd};

        use super::*;

        #[test]
        fn test_visit_binary_op_populates_the_instructions_for_ints() {
            let mut walker = AsmTreeWalker::default();

            let mut node = BinaryOpNode {
                l: Box::new(ExpressionNode::Int(IntNode::new(666))),
                r: Box::new(ExpressionNode::BinaryOp(BinaryOpNode {
                    l: Box::new(ExpressionNode::Int(IntNode::new(123))),
                    r: Box::new(ExpressionNode::Int(IntNode::new(456))),
                    op: BinaryOperation::Add,
                    span: None,
                })),
                op: BinaryOperation::Mul,
                span: None,
            };

            let _ = walker.visit_binary_op(&mut node);

            let expected = vec![
                IConst(Register(1), 666),
                IConst(Register(2), 123),
                IConst(Register(3), 456),
                IAdd(Register(2), Register(3), Register(4)),
                IMul(Register(1), Register(4), Register(5)),
            ];

            assert_eq!(walker.instructions, expected);
        }

        #[test]
        fn test_visit_binary_op_populates_the_instructions_for_floats() {
            let mut context = Context::default();
            context.scopes.push_new();
            let mut sym = Symbol::new("foo", LpcType::Float(false));
            sym.location = Some(Register(1));
            context.scopes.get_current_mut().unwrap().insert(sym);

            let mut walker = AsmTreeWalker::new(context);

            let mut node = BinaryOpNode {
                l: Box::new(ExpressionNode::Float(FloatNode::new(123.45))),
                r: Box::new(ExpressionNode::BinaryOp(BinaryOpNode {
                    l: Box::new(ExpressionNode::Var(VarNode {
                        name: "foo".to_string(),
                        span: None,
                        global: false,
                    })),
                    r: Box::new(ExpressionNode::Int(IntNode::new(456))),
                    op: BinaryOperation::Mul,
                    span: None,
                })),
                op: BinaryOperation::Add,
                span: None,
            };

            let _ = walker.visit_binary_op(&mut node);

            let expected = vec![
                FConst(Register(1), LpcFloat::from(123.45)),
                GLoad(Register(1), Register(2)),
                IConst(Register(3), 456),
                IMul(Register(2), Register(3), Register(4)),
                IAdd(Register(1), Register(4), Register(5)),
            ];

            assert_eq!(walker.instructions, expected);
        }

        #[test]
        fn test_visit_binary_op_populates_the_instructions_for_strings() {
            let mut walker = AsmTreeWalker::default();

            let mut node = BinaryOpNode {
                l: Box::new(ExpressionNode::String(StringNode::new("foo"))),
                r: Box::new(ExpressionNode::BinaryOp(BinaryOpNode {
                    l: Box::new(ExpressionNode::String(StringNode::new("bar"))),
                    r: Box::new(ExpressionNode::String(StringNode::new("baz"))),
                    op: BinaryOperation::Add,
                    span: None,
                })),
                op: BinaryOperation::Add,
                span: None,
            };

            let _ = walker.visit_binary_op(&mut node);

            let expected = vec![
                SConst(Register(1), String::from("foo")),
                SConst(Register(2), String::from("bar")),
                SConst(Register(3), String::from("baz")),
                MAdd(Register(2), Register(3), Register(4)),
                MAdd(Register(1), Register(4), Register(5)),
            ];

            assert_eq!(walker.instructions, expected);
        }

        #[test]
        fn test_visit_binary_op_populates_the_instructions_for_arrays() {
            let mut walker = AsmTreeWalker::default();

            let mut node = BinaryOpNode {
                l: Box::new(ExpressionNode::from(vec![ExpressionNode::from(123)])),
                r: Box::new(ExpressionNode::from(vec![ExpressionNode::from(456)])),
                op: BinaryOperation::Add,
                span: None,
            };

            let _ = walker.visit_binary_op(&mut node);

            let expected = vec![
                IConst(Register(1), 123),
                AConst(Register(2), vec![Register(1)]),
                IConst(Register(3), 456),
                AConst(Register(4), vec![Register(3)]),
                MAdd(Register(2), Register(4), Register(5)),
            ];

            assert_eq!(walker.instructions, expected);
        }

        #[test]
        fn test_visit_binary_op_populates_the_instructions_for_indexes() {
            let context = Context::default();
            let mut walker = AsmTreeWalker::new(context);

            let mut node = BinaryOpNode {
                l: Box::new(ExpressionNode::from(vec![ExpressionNode::from(123)])),
                r: Box::new(ExpressionNode::from(0)),
                op: BinaryOperation::Index,
                span: None,
            };

            let _ = walker.visit_binary_op(&mut node);

            let expected = vec![
                IConst(Register(1), 123),
                AConst(Register(2), vec![Register(1)]),
                IConst0(Register(3)),
                Load(Register(2), Register(3), Register(4)),
            ];

            assert_eq!(walker.instructions, expected);
        }

        #[test]
        fn test_visit_binary_op_populates_the_instructions_for_slices() {
            let mut walker = AsmTreeWalker::default();

            let mut node = BinaryOpNode {
                l: Box::new(ExpressionNode::from(vec![ExpressionNode::from(123)])),
                r: Box::new(ExpressionNode::Range(RangeNode {
                    l: Box::new(Some(ExpressionNode::from(1))),
                    r: Box::new(None),
                    span: None,
                })),
                op: BinaryOperation::Index,
                span: None,
            };

            let _ = walker.visit_binary_op(&mut node);

            let expected = vec![
                IConst(Register(1), 123),
                AConst(Register(2), vec![Register(1)]),
                IConst1(Register(3)),
                IConst(Register(4), -1),
                ARange(Register(2), Register(3), Register(4), Register(5)),
            ];

            assert_eq!(walker.instructions, expected);
        }
    }

    #[test]
    fn test_visit_string_populates_the_instructions() {
        let mut walker = AsmTreeWalker::default();
        let mut node = StringNode::new("marf");
        let mut node2 = StringNode::new("tacos");
        let mut node3 = StringNode::new("marf");

        let _ = walker.visit_string(&mut node);
        let _ = walker.visit_string(&mut node2);
        let _ = walker.visit_string(&mut node3);

        let expected = vec![
            SConst(Register(1), String::from("marf")),
            SConst(Register(2), String::from("tacos")),
            SConst(Register(3), String::from("marf")),
        ];

        assert_eq!(walker.instructions, expected);
    }

    #[test]
    fn test_visit_block_populates_instructions() {
        let block = "{ int a = '🏯'; dump(a); }";
        let mut tree = lpc_parser::BlockParser::new()
            .parse(LexWrapper::new(block))
            .unwrap();

        let mut scope_walker = ScopeWalker::default();
        let _ = scope_walker.visit_block(&mut tree);

        let context = scope_walker.into_context();
        let mut walker = AsmTreeWalker::new(context);
        let _ = walker.visit_block(&mut tree);

        let expected = vec![
            IConst(Register(1), 127983),
            Call {
                name: String::from("dump"),
                num_args: 1,
                initial_arg: Register(1),
            },
        ];

        assert_eq!(walker.instructions, expected);
    }

    #[test]
    fn test_visit_function_def_populates_the_data() {
        let mut scope_walker = ScopeWalker::default();
        let _walker = AsmTreeWalker::default();
        let call = "int main(int i) { return i + 4; }";
        let tree = lpc_parser::DefParser::new()
            .parse(LexWrapper::new(call))
            .unwrap();

        let mut node = if let AstNode::FunctionDef(node) = tree {
            node
        } else {
            panic!("Didn't receive a function def?");
        };

        let _ = scope_walker.visit_function_def(&mut node);

        let mut context = scope_walker.into_context();
        context.scopes.goto_root();

        let mut walker = AsmTreeWalker::new(context);
        let _ = walker.visit_function_def(&mut node);

        let expected = vec![
            IConst(Register(2), 4),
            IAdd(Register(1), Register(2), Register(3)),
            RegCopy(Register(3), Register(0)),
            Ret,
        ];

        assert_eq!(walker.instructions, expected);

        let address: Address = 0;

        let sym = FunctionSymbol {
            name: "main".to_string(),
            num_args: 1,
            num_locals: 2,
            address,
        };

        assert_eq!(walker.functions.get(&sym).unwrap(), &address);
    }

    #[test]
    fn visit_return_populates_the_instructions() {
        let mut walker = AsmTreeWalker::default();

        let mut node = ReturnNode::new(Some(ExpressionNode::from(IntNode::new(666))));
        let _ = walker.visit_return(&mut node);

        let expected = vec![
            IConst(Register(1), 666),
            RegCopy(Register(1), Register(0)),
            Ret,
        ];

        assert_eq!(walker.instructions, expected);

        /* === */

        let mut walker = AsmTreeWalker::default();
        let mut node = ReturnNode::new(None);
        let _ = walker.visit_return(&mut node);

        let expected = vec![Ret];

        assert_eq!(walker.instructions, expected);
    }

    #[test]
    fn test_decl_sets_scope_and_instructions() {
        let call = "int foo = 1, *bar = ({ 56 })";
        let mut tree = lpc_parser::DeclParser::new()
            .parse(LexWrapper::new(call))
            .unwrap();

        let mut scope_walker = ScopeWalker::default();
        let _ = scope_walker.visit_decl(&mut tree);

        let context = scope_walker.into_context();
        let mut walker = AsmTreeWalker::new(context);
        let _ = walker.visit_decl(&mut tree);

        let expected = vec![
            IConst1(Register(1)),
            GStore(Register(1), Register(1)),
            IConst(Register(2), 56),
            AConst(Register(3), vec![Register(2)]),
            GStore(Register(3), Register(3)),
        ];

        assert_eq!(walker.instructions, expected);

        let scope = walker.context.scopes.get_current().unwrap();
        assert_eq!(
            scope.lookup("foo").unwrap(),
            Symbol {
                name: String::from("foo"),
                type_: LpcType::Int(false),
                static_: false,
                location: Some(Register(1)),
                scope_id: 0,
                span: Some(Span {
                    file_id: 0,
                    l: 4,
                    r: 11
                })
            }
        );
        assert_eq!(
            scope.lookup("bar").unwrap(),
            Symbol {
                name: String::from("bar"),
                type_: LpcType::Int(true),
                static_: false,
                location: Some(Register(3)),
                scope_id: 0,
                span: Some(Span {
                    file_id: 0,
                    l: 13,
                    r: 25
                })
            }
        );
    }

    mod test_visit_var {
        use super::*;

        #[test]
        fn test_visit_var_loads_the_var_and_sets_the_result_for_globals() {
            let mut context = Context::default();
            context.scopes.push_new();

            let mut walker = AsmTreeWalker::new(context);

            insert_symbol(
                &mut walker,
                Symbol {
                    name: "marf".to_string(),
                    type_: LpcType::Int(false),
                    static_: false,
                    location: Some(Register(666)),
                    scope_id: 0,
                    span: None,
                },
            );
            // push a local scope with a matching variable in a different location
            walker.context.scopes.push_new();
            insert_symbol(
                &mut walker,
                Symbol {
                    name: "marf".to_string(),
                    type_: LpcType::Int(false),
                    static_: false,
                    location: Some(Register(222)),
                    scope_id: 1,
                    span: None,
                },
            );

            let mut node = VarNode {
                name: "marf".to_string(),
                span: None,
                global: true,
            };

            let _ = walker.visit_var(&mut node);
            assert_eq!(walker.current_result, Register(1)); // global loaded into r1

            let expected = vec![GLoad(Register(666), Register(1))];
            assert_eq!(walker.instructions, expected);
        }

        #[test]
        fn test_visit_var_sets_the_result_for_locals() {
            let mut context = Context::default();
            context.scopes.push_new();
            let mut walker = AsmTreeWalker::new(context);

            insert_symbol(
                &mut walker,
                // push a global marf to ensure we don't find it.
                Symbol {
                    name: "marf".to_string(),
                    type_: LpcType::Int(false),
                    static_: false,
                    location: Some(Register(444)),
                    scope_id: 0,
                    span: None,
                },
            );
            walker.context.scopes.push_new(); // push a local scope
            insert_symbol(
                &mut walker,
                Symbol {
                    name: "marf".to_string(),
                    type_: LpcType::Int(false),
                    static_: false,
                    location: Some(Register(666)),
                    scope_id: 1,
                    span: None,
                },
            );

            let mut node = VarNode::new("marf");

            let _ = walker.visit_var(&mut node);
            assert_eq!(walker.current_result, Register(666));

            let expected = vec![];
            assert_eq!(walker.instructions, expected);
        }
    }

    mod test_visit_assignment {
        use super::*;

        #[test]
        fn test_populates_the_instructions_for_globals() {
            let mut context = Context::default();
            context.scopes.push_new();
            let mut walker = AsmTreeWalker::new(context);

            let sym = Symbol {
                name: "marf".to_string(),
                type_: LpcType::Int(false),
                static_: false,
                location: Some(Register(666)),
                scope_id: 0,
                span: None,
            };
            insert_symbol(&mut walker, sym);

            // push a different, local `marf`, to ensure that we don't find it for this assignment.
            walker.context.scopes.push_new();
            let sym = Symbol {
                name: "marf".to_string(),
                type_: LpcType::Int(false),
                static_: false,
                location: Some(Register(123)),
                scope_id: 1,
                span: None,
            };
            insert_symbol(&mut walker, sym);

            let mut node = AssignmentNode {
                lhs: Box::new(ExpressionNode::Var(VarNode {
                    name: "marf".to_string(),
                    span: None,
                    global: true,
                })),
                rhs: Box::new(ExpressionNode::Int(IntNode::new(-12))),
                op: AssignmentOperation::Simple,
                span: None,
            };

            let _ = walker.visit_assignment(&mut node);
            assert_eq!(
                walker.instructions,
                [
                    IConst(Register(1), -12),
                    GLoad(Register(666), Register(2)),
                    RegCopy(Register(1), Register(2)),
                    GStore(Register(2), Register(666))
                ]
            );
        }

        #[test]
        fn test_populates_the_instructions_for_locals() {
            let mut context = Context::default();
            context.scopes.push_new();
            context.scopes.push_new();
            let mut walker = AsmTreeWalker::new(context);

            let sym = Symbol {
                name: "marf".to_string(),
                type_: LpcType::Int(false),
                static_: false,
                location: Some(Register(666)),
                scope_id: 1,
                span: None,
            };

            insert_symbol(&mut walker, sym);

            let mut node = AssignmentNode {
                lhs: Box::new(ExpressionNode::Var(VarNode::new("marf"))),
                rhs: Box::new(ExpressionNode::Int(IntNode::new(-12))),
                op: AssignmentOperation::Simple,
                span: None,
            };

            let _ = walker.visit_assignment(&mut node);
            assert_eq!(
                walker.instructions,
                [
                    IConst(Register(1), -12),
                    RegCopy(Register(1), Register(666))
                ]
            );
        }

        #[test]
        fn test_populates_the_instructions_for_array_items() {
            let mut context = Context::default();
            context.scopes.push_new();
            context.scopes.push_new();
            let mut walker = AsmTreeWalker::new(context);

            let sym = Symbol {
                name: "marf".to_string(),
                type_: LpcType::Int(true),
                static_: false,
                location: Some(Register(666)),
                scope_id: 1,
                span: None,
            };

            insert_symbol(&mut walker, sym);

            let mut node = AssignmentNode {
                lhs: Box::new(ExpressionNode::BinaryOp(BinaryOpNode {
                    l: Box::new(ExpressionNode::from(VarNode::new("marf"))),
                    r: Box::new(ExpressionNode::from(1)),
                    op: BinaryOperation::Index,
                    span: None,
                })),
                rhs: Box::new(ExpressionNode::from(-12)),
                op: AssignmentOperation::Simple,
                span: None,
            };

            let _ = walker.visit_assignment(&mut node);
            assert_eq!(
                walker.instructions,
                [
                    IConst(Register(1), -12),
                    IConst1(Register(2)),
                    Store(Register(1), Register(666), Register(2))
                ]
            );
        }
    }

    #[test]
    fn test_visit_array_populates_the_instructions() {
        let mut walker = AsmTreeWalker::default();

        let mut arr = ArrayNode::new(vec![
            ExpressionNode::from(123),
            ExpressionNode::from("foo"),
            ExpressionNode::from(vec![ExpressionNode::from(666)]),
        ]);

        let _ = walker.visit_array(&mut arr);

        let expected = vec![
            IConst(Register(1), 123),
            SConst(Register(2), String::from("foo")),
            IConst(Register(3), 666),
            AConst(Register(4), vec![Register(3)]),
            AConst(Register(5), vec![Register(1), Register(2), Register(4)]),
        ];

        assert_eq!(walker.instructions, expected);
    }

    #[test]
    fn test_visit_comma_expression_populates_the_instructions() {
        let mut walker = AsmTreeWalker::default();

        let mut expr = CommaExpressionNode::new(vec![
            ExpressionNode::from(123),
            ExpressionNode::from("foo"),
            ExpressionNode::from(vec![ExpressionNode::from(666)]),
        ]);

        let _ = walker.visit_comma_expression(&mut expr);

        let expected = vec![
            IConst(Register(1), 123),
            SConst(Register(2), String::from("foo")),
            IConst(Register(3), 666),
            AConst(Register(4), vec![Register(3)]),
        ];

        assert_eq!(walker.instructions, expected);
        assert_eq!(walker.current_result, Register(4));
    }

    mod test_visit_var_init {
        use super::*;
        use crate::asm::instruction::Instruction::{FConst, MapConst};
        use decorum::Total;

        fn setup() -> AsmTreeWalker {
            let mut context = Context::default();
            context.scopes.push_new();
            context.scopes.push_new();
            AsmTreeWalker::new(context)
        }

        fn setup_var(type_: LpcType, walker: &mut AsmTreeWalker) {
            let sym = Symbol::new("marf", type_).with_location(Some(Register(1)));
            walker.register_counter.next(); // force-increment to mimic the scope walker
            insert_symbol(walker, sym);

            let mut node = VarInitNode {
                type_,
                name: "muffins".to_string(),
                value: Some(ExpressionNode::Var(VarNode::new("marf"))),
                array: false,
                global: false,
                span: None,
            };

            insert_symbol(walker, Symbol::from(&mut node.clone()));

            let _ = walker.visit_var_init(&mut node);
        }

        fn setup_literal(type_: LpcType, value: ExpressionNode, walker: &mut AsmTreeWalker) {
            let mut node = VarInitNode {
                type_,
                name: "muffins".to_string(),
                value: Some(value),
                array: false,
                global: false,
                span: None,
            };

            insert_symbol(walker, Symbol::from(&mut node));

            let _ = walker.visit_var_init(&mut node);
        }

        #[test]
        fn test_does_not_copy_mapping_literals() {
            let mut walker = setup();
            let pairs = vec![(ExpressionNode::from("foo"), ExpressionNode::from("bar"))];
            setup_literal(
                LpcType::Mapping(false),
                ExpressionNode::Mapping(MappingNode::new(pairs, None)),
                &mut walker,
            );

            let mut map = HashMap::new();
            map.insert(Register(1), Register(2));
            assert_eq!(
                walker.instructions,
                [
                    SConst(Register(1), String::from("foo")),
                    SConst(Register(2), String::from("bar")),
                    MapConst(Register(3), map)
                ]
            );
        }

        #[test]
        fn test_copies_mapping_vars() {
            let mut walker = setup();
            setup_var(LpcType::Mapping(false), &mut walker);

            assert_eq!(walker.instructions, [RegCopy(Register(1), Register(2))]);
        }

        #[test]
        fn test_does_not_copy_int_literals() {
            let mut walker = setup();
            setup_literal(
                LpcType::Int(false),
                ExpressionNode::Int(IntNode::new(123)),
                &mut walker,
            );

            assert_eq!(walker.instructions, [IConst(Register(1), 123)]);
        }

        #[test]
        fn test_copies_int_vars() {
            let mut walker = setup();
            setup_var(LpcType::Int(false), &mut walker);

            assert_eq!(walker.instructions, [RegCopy(Register(1), Register(2))]);
        }

        #[test]
        fn test_does_not_copy_float_literals() {
            let mut walker = setup();
            setup_literal(
                LpcType::Float(false),
                ExpressionNode::Float(FloatNode::new(123.0)),
                &mut walker,
            );

            assert_eq!(
                walker.instructions,
                [FConst(Register(1), Total::from(123.0))]
            );
        }

        #[test]
        fn test_copies_float_vars() {
            let mut walker = setup();
            setup_var(LpcType::Float(false), &mut walker);

            assert_eq!(walker.instructions, [RegCopy(Register(1), Register(2))]);
        }

        #[test]
        fn test_does_not_copy_string_literals() {
            let mut walker = setup();
            setup_literal(
                LpcType::Int(true),
                ExpressionNode::String(StringNode::new("foo")),
                &mut walker,
            );

            assert_eq!(
                walker.instructions,
                [SConst(Register(1), String::from("foo"))]
            );
        }

        #[test]
        fn test_copies_string_vars() {
            let mut walker = setup();
            setup_var(LpcType::String(false), &mut walker);

            assert_eq!(walker.instructions, [RegCopy(Register(1), Register(2))]);
        }

        #[test]
        fn test_does_not_copy_array_literals() {
            let mut walker = setup();
            setup_literal(
                LpcType::Int(true),
                ExpressionNode::Array(ArrayNode::new(vec![ExpressionNode::from(1234)])),
                &mut walker,
            );

            assert_eq!(
                walker.instructions,
                [
                    IConst(Register(1), 1234),
                    AConst(Register(2), vec![Register(1)])
                ]
            );
        }

        #[test]
        fn test_copies_array_vars() {
            let mut walker = setup();
            setup_var(LpcType::Int(true), &mut walker);

            assert_eq!(walker.instructions, [RegCopy(Register(1), Register(2))]);
        }
    }

    mod test_visit_if {
        use super::*;
        use crate::asm::instruction::Instruction::{EqEq, Jmp, Jz};

        #[test]
        fn test_populates_the_instructions() {
            let mut walker = AsmTreeWalker::default();

            let mut node = IfNode {
                condition: ExpressionNode::BinaryOp(BinaryOpNode {
                    l: Box::new(ExpressionNode::from(666)),
                    r: Box::new(ExpressionNode::from(777)),
                    op: BinaryOperation::EqEq,
                    span: None,
                }),
                body: Box::new(AstNode::Call(CallNode {
                    arguments: vec![ExpressionNode::from("true")],
                    name: "dump".to_string(),
                    span: None,
                })),
                else_clause: Box::new(Some(AstNode::Call(CallNode {
                    arguments: vec![ExpressionNode::from("false")],
                    name: "dump".to_string(),
                    span: None,
                }))),
                scope_id: None,
                span: None,
            };

            let _ = walker.visit_if(&mut node);

            let expected = vec![
                IConst(Register(1), 666),
                IConst(Register(2), 777),
                EqEq(Register(1), Register(2), Register(3)),
                Jz(Register(3), 7),
                SConst(Register(4), String::from("true")),
                Call {
                    name: String::from("dump"),
                    num_args: 1,
                    initial_arg: Register(4),
                },
                Jmp(9),
                SConst(Register(5), String::from("false")),
                Call {
                    name: String::from("dump"),
                    num_args: 1,
                    initial_arg: Register(5),
                },
            ];

            assert_eq!(walker.instructions, expected);
        }
    }

    mod test_visit_while {
        use super::*;
        use crate::asm::instruction::Instruction::{EqEq, Jmp, Jz};

        #[test]
        fn test_populates_the_instructions() {
            let mut walker = AsmTreeWalker::default();

            let mut node = WhileNode {
                condition: ExpressionNode::BinaryOp(BinaryOpNode {
                    l: Box::new(ExpressionNode::from(666)),
                    r: Box::new(ExpressionNode::from(777)),
                    op: BinaryOperation::EqEq,
                    span: None,
                }),
                body: Box::new(AstNode::Call(CallNode {
                    arguments: vec![ExpressionNode::from("body")],
                    name: "dump".to_string(),
                    span: None,
                })),
                scope_id: None,
                span: None,
            };

            let _ = walker.visit_while(&mut node);

            let expected = vec![
                IConst(Register(1), 666),
                IConst(Register(2), 777),
                EqEq(Register(1), Register(2), Register(3)),
                Jz(Register(3), 7),
                SConst(Register(4), String::from("body")),
                Call {
                    name: String::from("dump"),
                    num_args: 1,
                    initial_arg: Register(4),
                },
                Jmp(0),
            ];

            assert_eq!(walker.instructions, expected);
        }
    }

    mod test_visit_do_while {
        use super::*;
        use crate::{
            asm::instruction::Instruction::{EqEq, Jnz},
            ast::do_while_node::DoWhileNode,
        };

        #[test]
        fn test_populates_the_instructions() {
            let mut walker = AsmTreeWalker::default();

            let mut node = DoWhileNode {
                condition: ExpressionNode::BinaryOp(BinaryOpNode {
                    l: Box::new(ExpressionNode::from(666)),
                    r: Box::new(ExpressionNode::from(777)),
                    op: BinaryOperation::EqEq,
                    span: None,
                }),
                body: Box::new(AstNode::Call(CallNode {
                    arguments: vec![ExpressionNode::from("body")],
                    name: "dump".to_string(),
                    span: None,
                })),
                scope_id: None,
                span: None,
            };

            let _ = walker.visit_do_while(&mut node);

            let expected = vec![
                SConst(Register(1), String::from("body")),
                Call {
                    name: String::from("dump"),
                    num_args: 1,
                    initial_arg: Register(1),
                },
                IConst(Register(2), 666),
                IConst(Register(3), 777),
                EqEq(Register(2), Register(3), Register(4)),
                Jnz(Register(4), 0),
            ];

            assert_eq!(walker.instructions, expected);
        }
    }

    mod test_visit_for {
        use super::*;
        use crate::{
            asm::instruction::Instruction::{ISub, Jmp, Jz},
            ast::for_node::ForNode,
        };

        #[test]
        fn populates_the_instructions() {
            let var = VarNode {
                name: "i".to_string(),
                span: None,
                global: false,
            };

            let mut node = ForNode {
                initializer: Box::new(Some(AstNode::VarInit(VarInitNode {
                    type_: LpcType::Int(false),
                    name: "i".to_string(),
                    value: Some(ExpressionNode::from(10)),
                    array: false,
                    global: false,
                    span: None,
                }))),
                condition: Some(ExpressionNode::Var(var.clone())),
                incrementer: Some(ExpressionNode::Assignment(AssignmentNode {
                    lhs: Box::new(ExpressionNode::Var(var.clone())),
                    rhs: Box::new(ExpressionNode::BinaryOp(BinaryOpNode {
                        l: Box::new(ExpressionNode::Var(var.clone())),
                        r: Box::new(ExpressionNode::from(1)),
                        op: BinaryOperation::Sub,
                        span: None,
                    })),
                    op: AssignmentOperation::Simple,
                    span: None,
                })),
                body: Box::new(AstNode::Block(BlockNode {
                    body: vec![AstNode::Call(CallNode {
                        arguments: vec![ExpressionNode::Var(var.clone())],
                        name: "dump".to_string(),
                        span: None,
                    })],
                    scope_id: None,
                })),
                scope_id: None,
                span: None,
            };

            let mut scope_walker = ScopeWalker::default();
            let _ = scope_walker.visit_for(&mut node);

            let context = scope_walker.into_context();
            let mut walker = AsmTreeWalker::new(context);

            let _ = walker.visit_for(&mut node).unwrap();

            let expected = vec![
                IConst(Register(1), 10),
                Jz(Register(1), 7),
                Call {
                    name: String::from("dump"),
                    num_args: 1,
                    initial_arg: Register(1),
                },
                IConst1(Register(2)),
                ISub(Register(1), Register(2), Register(3)),
                RegCopy(Register(3), Register(1)),
                Jmp(1),
            ];

            assert_eq!(walker.instructions, expected);
        }
    }

    fn insert_symbol(walker: &mut AsmTreeWalker, symbol: Symbol) {
        if let Some(node_id) = walker.context.scopes.current_id {
            walker
                .context
                .scopes
                .get_mut(node_id)
                .unwrap()
                .insert(symbol)
        } else {
            panic!("No current scope to insert the symbol into.")
        }
    }
}
