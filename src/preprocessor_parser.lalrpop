use crate::compiler::preprocessor::preprocessor_node::PreprocessorNode;
use crate::compiler::ast::binary_op_node::BinaryOperation;
use crate::compiler::lexer::Token;
use lpc_rs_errors::LpcError;
use lpc_rs_errors::span::Span;
use crate::compiler::lexer::logos_token::{StringToken, IntToken};
use lpc_rs_core::LpcIntInner;

grammar;

extern {
    type Location = usize;
    type Error = LpcError;

    enum Token {
        "+" => Token::Plus(<Span>),
        "-" => Token::Minus(<Span>),
        "*" => Token::Mul(<Span>),
        "/" => Token::Div(<Span>),
        "%" => Token::Mod(<Span>),
        "!" => Token::Bang(<Span>),
        "^" => Token::Caret(<Span>),
        "~" => Token::Tilde(<Span>),
        "&" => Token::And(<Span>),
        "&&" => Token::AndAnd(<Span>),
        "|" => Token::Or(<Span>),
        "||" => Token::OrOr(<Span>),
        "<<" => Token::LeftShift(<Span>),
        ">>" => Token::RightShift(<Span>),
        "==" => Token::EqEq(<Span>),
        "!=" => Token::NotEq(<Span>),
        "<" => Token::LessThan(<Span>),
        "<=" => Token::LessThanEq(<Span>),
        ">" => Token::GreaterThan(<Span>),
        ">=" => Token::GreaterThanEq(<Span>),

        "=" => Token::Assign(<Span>),
        "+=" => Token::AddEq(<Span>),
        "-=" => Token::SubEq(<Span>),
        "*=" => Token::MulEq(<Span>),
        "/=" => Token::DivEq(<Span>),
        "%=" => Token::ModEq(<Span>),
        "^=" => Token::CaretEq(<Span>),
        "&=" => Token::AndEq(<Span>),
        "&&=" => Token::AndAndEq(<Span>),
        "|=" => Token::OrEq(<Span>),
        "||=" => Token::OrOrEq(<Span>),
        "<<=" => Token::LeftShiftEq(<Span>),
        ">>=" => Token::RightShiftEq(<Span>),

        "if" => Token::If(<Span>),
        "else" => Token::Else(<Span>),
        "while" => Token::While(<Span>),
        "for" => Token::For(<Span>),
        "inherit" => Token::Inherit(<Span>),
        "break" => Token::Break(<Span>),
        "continue" => Token::Continue(<Span>),
        "case" => Token::Case(<Span>),
        "do" => Token::Do(<Span>),
        "int" => Token::Int(<Span>),
        "float" => Token::Float(<Span>),
        "string" => Token::String(<Span>),
        "object" => Token::Object(<Span>),
        "mapping" => Token::Mapping(<Span>),
        "mixed" => Token::Mixed(<Span>),
        "void" => Token::Void(<Span>),
        "return" => Token::Return(<Span>),
        "static" => Token::Static(<Span>),
        "nomask" => Token::Nomask(<Span>),
        "efun" => Token::Efun(<Span>),

        "(" => Token::LParen(<Span>),
        ")" => Token::RParen(<Span>),
        "[" => Token::LBracket(<Span>),
        "]" => Token::RBracket(<Span>),
        "{" => Token::LBrace(<Span>),
        "}" => Token::RBrace(<Span>),
        "," => Token::Comma(<Span>),
        "->" => Token::CallOther(<Span>),
        "?" => Token::Question(<Span>),
        ":" => Token::Colon(<Span>),
        "::" => Token::ColonColon(<Span>),
        ";" => Token::Semi(<Span>),
        "..." => Token::Ellipsis(<Span>),
        ".." => Token::Range(<Span>),

        "defined" => Token::Defined(<Span>),
        "defined(" => Token::DefinedParen(<Span>),
        "not" => Token::Not(<Span>),

        "StringLiteral" => Token::StringLiteral(<StringToken>),
        "IntLiteral" => Token::IntLiteral(<IntToken>),
//        "FloatLiteral" => Token::FloatLiteral(<FloatToken>),
        "ID" => Token::Id(<StringToken>),
    }
}

PrimaryExpression: PreprocessorNode = {
    <Int> => PreprocessorNode::Int(<>),
    <Var> => PreprocessorNode::Var(<>),
    <String> => PreprocessorNode::String(<>),
    "(" <Expression> ")",
    <not:"not"?> "defined" "(" <var:Var> ")" => PreprocessorNode::Defined(var, not.is_some()),
    <not:"not"?> "defined(" <var:Var> ")" => PreprocessorNode::Defined(var, not.is_some()),
    // anything else can be passed through, as it has no meaning in the preprocessor
    ! => PreprocessorNode::Int(1)
};

AdditiveExpression: PreprocessorNode = {
    <PrimaryExpression>,
    <l:AdditiveExpression> <op:AdditiveBinaryOp> <r:PrimaryExpression> => {
         PreprocessorNode::BinaryOp(op, Box::new(l), Box::new(r))
    }
};

LogicalAndExpression: PreprocessorNode = {
    <AdditiveExpression>,
    <l:LogicalAndExpression> "&&" <r:AdditiveExpression> => {
        PreprocessorNode::BinaryOp(BinaryOperation::AndAnd, Box::new(l), Box::new(r))
    }
};

LogicalOrExpression: PreprocessorNode = {
    <LogicalAndExpression>,
    <l:LogicalOrExpression> "||" <r:LogicalAndExpression> => {
        PreprocessorNode::BinaryOp(BinaryOperation::OrOr, Box::new(l), Box::new(r))
    }
};

pub Expression: PreprocessorNode = {
    <LogicalOrExpression>,
};

Var: String = <"ID"> => <>.1;

Int: LpcIntInner = <"IntLiteral"> => <>.1;

String: String = <"StringLiteral"> => <>.1;

AdditiveBinaryOp: BinaryOperation = {
    "+" => BinaryOperation::Add,
    "-" => BinaryOperation::Sub
};
