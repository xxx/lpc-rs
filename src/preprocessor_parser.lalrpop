use std::str::FromStr;
use crate::preprocessor::preprocessor_node::PreprocessorNode;
use crate::ast::binary_op_node::BinaryOperation;

grammar;

PrimaryExpression: PreprocessorNode = {
    <Int> => PreprocessorNode::Int(<>),
    <Var> => PreprocessorNode::Var(<>),
    "(" <Expression> ")",
    "defined" "(" <Var> ")" => PreprocessorNode::Defined(<>),
    "defined(" <Var> ")" => PreprocessorNode::Defined(<>),
};

AdditiveExpression: PreprocessorNode = {
    <PrimaryExpression>,
    <l:AdditiveExpression> <op:AdditiveBinaryOp> <r:PrimaryExpression> => {
         PreprocessorNode::BinaryOp(op, Box::new(l), Box::new(r))
    }
};

LogicalAndExpression: PreprocessorNode = {
    <AdditiveExpression>,
    <l:LogicalAndExpression> <op:"&&"> <r:AdditiveExpression> => {
        PreprocessorNode::BinaryOp(BinaryOperation::AndAnd, Box::new(l), Box::new(r))
    }
};

LogicalOrExpression: PreprocessorNode = {
    <LogicalAndExpression>,
    <l:LogicalOrExpression> <op:"||"> <r:LogicalAndExpression> => {
        PreprocessorNode::BinaryOp(BinaryOperation::OrOr, Box::new(l), Box::new(r))
    }
};

pub Expression: PreprocessorNode = {
    <LogicalOrExpression>,
};

Var: String = <r"[\p{Alphabetic}_]\w*"> => {
    String::from(<>)
};

pub Int: i64 = {
    <s:r"[1-9][0-9_]*|0"> => i64::from_str(&s.replace("_", "")).unwrap(),
    <s:r"0[xX][0-9a-fA-F][0-9a-fA-F_]*"> => i64::from_str_radix(
                                                &s.replace("_", "")
                                                  .trim_start_matches("0x")
                                                  .trim_start_matches("0X"),
                                                16).unwrap(),
    <s:r"0[oO]?[0-7][0-7_]*"> => i64::from_str_radix(
                                     &s.replace("_", "")
                                       .trim_start_matches("0o")
                                       .trim_start_matches("0O"),
                                     8).unwrap(),
    <s:r"0[bB][01][01_]*"> => i64::from_str_radix(
                                  &s.replace("_", "")
                                    .trim_start_matches("0b")
                                    .trim_start_matches("0B"),
                                  2).unwrap(),
};

AdditiveBinaryOp: BinaryOperation = {
    "+" => BinaryOperation::Add,
    "-" => BinaryOperation::Sub
};
