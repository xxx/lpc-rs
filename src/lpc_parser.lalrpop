use crate::ast::program_node::ProgramNode;
use crate::ast::binary_op_node::BinaryOperation;
use crate::ast::expression_node::ExpressionNode;
use crate::ast::function_def_node::FunctionDefNode;
use crate::ast::int_node::IntNode;
use crate::ast::float_node::FloatNode;
use crate::ast::call_node::CallNode;
use crate::ast::return_node::ReturnNode;
use crate::ast::decl_node::DeclNode;
use crate::ast::var_init_node::VarInitNode;
use crate::ast::range_node::RangeNode;
use crate::ast::var_node::VarNode;
use crate::ast::string_node::StringNode;
use crate::ast::assignment_node::{AssignmentOperation, AssignmentNode};
use crate::ast::array_node::ArrayNode;
use crate::ast::comma_expression_node::CommaExpressionNode;
use crate::semantic::lpc_type::LPCType;
use crate::ast::ast_node::ASTNode;
use crate::parser::collapse_expression::collapse_expression;
use crate::parser::span::Span;
use crate::parser::lexer::Token;
use crate::errors::compiler_error::lex_error::LexError;
use crate::errors::lazy_files::FileId;
use crate::parser::lexer::logos_token::{StringToken, IntToken, FloatToken};

grammar;

extern {
    type Location = usize;
    type Error = LexError;

    enum Token {
        "+" => Token::Plus(<FileId>),
        "-" => Token::Minus(<FileId>),
        "*" => Token::Mul(<FileId>),
        "/" => Token::Div(<FileId>),
        "%" => Token::Mod(<FileId>),
        "!" => Token::Bang(<FileId>),
        "^" => Token::Caret(<FileId>),
        "~" => Token::Tilde(<FileId>),
        "&" => Token::And(<FileId>),
        "&&" => Token::AndAnd(<FileId>),
        "|" => Token::Or(<FileId>),
        "||" => Token::OrOr(<FileId>),
        "<<" => Token::LeftShift(<FileId>),
        ">>" => Token::RightShift(<FileId>),
        "==" => Token::EqEq(<FileId>),
        "!=" => Token::NotEq(<FileId>),
        "<" => Token::LessThan(<FileId>),
        "<=" => Token::LessThanEq(<FileId>),
        ">" => Token::GreaterThan(<FileId>),
        ">=" => Token::GreaterThanEq(<FileId>),

        "=" => Token::Assign(<FileId>),
        "+=" => Token::PlusEq(<FileId>),
        "-=" => Token::MinusEq(<FileId>),
        "*=" => Token::MulEq(<FileId>),
        "/=" => Token::DivEq(<FileId>),
        "%=" => Token::ModEq(<FileId>),
        "^=" => Token::CaretEq(<FileId>),
        "~=" => Token::TildeEq(<FileId>),
        "&=" => Token::AndEq(<FileId>),
        "&&=" => Token::AndAndEq(<FileId>),
        "|=" => Token::OrEq(<FileId>),
        "||=" => Token::OrOrEq(<FileId>),
        "<<=" => Token::LeftShiftEq(<FileId>),
        ">>=" => Token::RightShiftEq(<FileId>),

        "if" => Token::If(<FileId>),
        "else" => Token::Else(<FileId>),
        "while" => Token::While(<FileId>),
        "for" => Token::For(<FileId>),
        "inherit" => Token::Inherit(<FileId>),
        "break" => Token::Break(<FileId>),
        "continue" => Token::Continue(<FileId>),
        "case" => Token::Case(<FileId>),
        "do" => Token::Do(<FileId>),
        "int" => Token::Int(<FileId>),
        "float" => Token::Float(<FileId>),
        "string" => Token::String(<FileId>),
        "object" => Token::Object(<FileId>),
        "mapping" => Token::Mapping(<FileId>),
        "mixed" => Token::Mixed(<FileId>),
        "void" => Token::Void(<FileId>),
        "return" => Token::Return(<FileId>),
        "static" => Token::Static(<FileId>),
        "nomask" => Token::Nomask(<FileId>),
        "efun" => Token::Efun(<FileId>),

        "(" => Token::LParen(<FileId>),
        ")" => Token::RParen(<FileId>),
        "[" => Token::LBracket(<FileId>),
        "]" => Token::RBracket(<FileId>),
        "{" => Token::LBrace(<FileId>),
        "}" => Token::RBrace(<FileId>),
        "," => Token::Comma(<FileId>),
        "->" => Token::CallOther(<FileId>),
        "?" => Token::Question(<FileId>),
        ":" => Token::Colon(<FileId>),
        "::" => Token::ColonColon(<FileId>),
        ";" => Token::Semi(<FileId>),
        "..." => Token::Ellipsis(<FileId>),
        ".." => Token::Range(<FileId>),

        "StringLiteral" => Token::StringLiteral(<StringToken>),
        "IntLiteral" => Token::IntLiteral(<IntToken>),
        "FloatLiteral" => Token::FloatLiteral(<FloatToken>),
        "ID" => Token::ID(<StringToken>),
    }
}

SemiSeq<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Program: ProgramNode = <body:Def*> => ProgramNode {
    body: body.iter().map(|i| ASTNode::from(i.clone())).collect::<Vec<_>>()
};

pub Def: ASTNode = {
    <FunctionDef> => ASTNode::from(<>),
    <decl:Decl> ";" => {
        let mut node = decl.clone();
        node.initializations.iter_mut().for_each(|i| i.global = true);

        ASTNode::from(node)
    }
};

FunctionDef: FunctionDefNode = {
    <l:@L> <r_type:Type?> <star:"*"?> <name:"ID"> <parameters:Parameters> <r:@R> "{" <body:SemiSeq<Statement>> "}" => {
         let array = star.is_some();

         let return_type = if let Some(this_type) = r_type {
             match this_type.as_str() {
                 "void" => LPCType::Void,
                 "int" => LPCType::Int(array),
                 "string" => LPCType::String(array),
                 "float" => LPCType::Float(array),
                 // "object" => LPCType::Object(array),
                 // "mapping" => LPCType::Mapping(array),
                 "mixed" => LPCType::Mixed(array),
                 _ => unimplemented!()
             }
         } else {
             LPCType::Int(array)
         };

        FunctionDefNode {
            name: name.1,
            parameters,
            body,
            return_type,
            span: Some(Span { l, r })
        }
    },
}

Parameters: Vec<VarInitNode> = {
    "(" <parm:Parameter?> ")" => {
        parm.unwrap_or(vec![])
    }
};

// TODO: ellipsis
Parameter: Vec<VarInitNode> = {
    <parms:ParameterList> <ellipsis:("," "...")?> => {
        parms
    }
};

ParameterList: Vec<VarInitNode> = {
    <list:(<ParameterList> ",")?> <name:ArgName> => {
        let mut v = list.unwrap_or(vec![]);
        v.push(name);
        v
    }
};

ArgName: VarInitNode = {
    <var_type:Type> <mut init:VarInit> => {
        let new_type = LPCType::from(var_type);

        init.type_ = new_type.as_array(init.array);

        init
    }
};

Type: String = {
    "int" => <>.to_string(),
    "float" => <>.to_string(),
    "string" => <>.to_string(),
    "mixed" => <>.to_string(),
    "void" => <>.to_string(),
};

pub Statement: ASTNode = {
    <Expression> => ASTNode::from(<>),
    <Return> => ASTNode::from(<>),
    <Decl> => ASTNode::from(<>)
};

VarInit: VarInitNode = {
    <l:@L> <array:"*"?> <name:"ID"> <value:("=" <AssignmentExpression>)?> <r:@R> => {
        VarInitNode {
            type_: LPCType::Int(false), // placeholder. Corrected in Decl.
            name: name.1,
            value,
            array: array.is_some(),
            global: false,
            span: Some(Span { l, r })
        }
    }
}

pub Decl: DeclNode = {
    <var_type:Type> <init:VarInit> <optional:("," <VarInit>)*> => {
        let new_type = LPCType::from(var_type).as_array(init.array);
        let mut initializations = vec![init];

        initializations.append(optional.to_vec().as_mut());

        // Update each VarInitNode with the correct type.
        for init in &mut initializations {
            init.update_type(new_type)
        }

        DeclNode {
            type_: new_type,
            initializations
        }
    }
}

pub PrimaryExpression: ExpressionNode = {
    <Int>,
    <Float>,
    <String>,
    <Var>,
    "(" <Expression> ")",
    "(" "{" <l:ExpressionList?> "}" ")" => {
        let vec = if let Some(list) = l {
            list
        } else {
            vec![]
        };

        ExpressionNode::Array(ArrayNode::new(vec))
    }
};

pub PostfixExpression: ExpressionNode = {
    <PrimaryExpression>,
    <left:@L> <l:PostfixExpression> "[" <r:Expression> "]" <right:@R> => {
        collapse_expression(BinaryOperation::Index, l, r, Span { l: left, r: right })
    },
    <left:@L> <l:PostfixExpression> "["  <e1:Expression> ".." <e2:Expression> "]" <right:@R> => {
        let r = ExpressionNode::Range(RangeNode {
            l: Box::new(Some(e1)),
            r: Box::new(Some(e2)),
            span: Some(Span { l: left, r: right })
        });

        collapse_expression(BinaryOperation::Index, l, r, Span { l: left, r: right })
    },
    <left:@L> <l:PostfixExpression> "[" ".." <e:Expression> "]" <right:@R> => {
        let r = ExpressionNode::Range(RangeNode {
            l: Box::new(None),
            r: Box::new(Some(e)),
            span: Some(Span { l: left, r: right })
        });

        collapse_expression(BinaryOperation::Index, l, r, Span { l: left, r: right })
    },
    <left:@L> <l:PostfixExpression> "[" <e:Expression> ".." "]" <right:@R> => {
        let r = ExpressionNode::Range(RangeNode {
            l: Box::new(Some(e)),
            r: Box::new(None),
            span: Some(Span { l: left, r: right })
        });

        collapse_expression(BinaryOperation::Index, l, r, Span { l: left, r: right })
    },
    Call => ExpressionNode::Call(<>)
};

pub UnaryExpression: ExpressionNode = {
    <PostfixExpression>,
};

pub CastExpression: ExpressionNode = {
    <UnaryExpression>,
}

pub MultiplicitiveExpression: ExpressionNode = {
    <CastExpression>,
    <left:@L> <l:MultiplicitiveExpression> <op:MultiplicitiveBinaryOp> <r:CastExpression> <right:@R> => {
         collapse_expression(op, l, r, Span { l: left, r: right })
    },
};

pub AdditiveExpression: ExpressionNode = {
    <MultiplicitiveExpression>,
    <left:@L> <l:AdditiveExpression> <op:AdditiveBinaryOp> <r:MultiplicitiveExpression> <right:@R> => {
        collapse_expression(op, l, r, Span { l: left, r: right })
    }
};

pub ShiftExpression: ExpressionNode = {
    <AdditiveExpression>,
};

pub RelationalExpression: ExpressionNode = {
    <ShiftExpression>
};

pub EqualityExpression: ExpressionNode = {
    <RelationalExpression>
};

pub AndExpression: ExpressionNode = {
    <EqualityExpression>
};

pub ExclusiveOrExpression: ExpressionNode = {
    <AndExpression>
};

pub OrExpression: ExpressionNode = {
    <ExclusiveOrExpression>
};

pub LogicalAndExpression: ExpressionNode = {
    <OrExpression>
};

pub LogicalOrExpression: ExpressionNode = {
    <LogicalAndExpression>
};

pub ConditionalExpression: ExpressionNode = {
    <LogicalOrExpression>
};

AssignmentExpression: ExpressionNode = {
    <ConditionalExpression>,
    <l:@L> <lhs:UnaryExpression> <op:AssignmentOp> <rhs:AssignmentExpression> <r:@R> => ExpressionNode::Assignment(AssignmentNode {
        lhs: Box::new(lhs),
        rhs: Box::new(rhs),
        op,
        span: Some(Span { l, r })
    })
};

pub Expression: ExpressionNode = {
    <AssignmentExpression>,
    <l:@L> <e:Expression> "," <ass:AssignmentExpression> <r:@R> => {
        let mut list = if let ExpressionNode::CommaExpression(ce) = e {
            ce.value
        } else {
            vec![e]
        };

        list.extend_from_slice(&[ass]);

        ExpressionNode::CommaExpression(CommaExpressionNode {
            value: list,
            span: Some(Span { l, r })
        })
    }
};

pub Return: ReturnNode = {
    <l:@L> "return" <e:Expression?> <r:@R> => ReturnNode { value: e, span: Some(Span { l, r }) }
}

ExpressionList: Vec<ExpressionNode> = {
    <AssignmentExpression> => vec![<>],
    <list:ExpressionList> "," <arg:AssignmentExpression> => {
        let mut v = list;
        v.push(arg);
        v
    }
};

ArgumentExpressionList: Vec<ExpressionNode> = {
    <AssignmentExpression> => vec![<>],
    <list:ArgumentExpressionList> "," <arg:AssignmentExpression> => {
        let mut v = list;
        v.push(arg);
        v
    }
};

pub Call: CallNode = {
    <l:@L> <name:"ID"> "(" <list:ArgumentExpressionList?> ")" <r:@R> => {
        let arguments = match list {
            Some(args) => args,
            None => vec![]
        };

        CallNode {
            arguments,
            name: name.1,
            span: Some(Span { l, r })
        }
    }
};

AssignmentOp: AssignmentOperation = {
    "=" => AssignmentOperation::Simple
};

AdditiveBinaryOp: BinaryOperation = {
    "+" => BinaryOperation::Add,
    "-" => BinaryOperation::Sub
};

MultiplicitiveBinaryOp: BinaryOperation = {
    "*" => BinaryOperation::Mul,
    "/" => BinaryOperation::Div
};

Var: ExpressionNode = <l:@L> <name:"ID"> <r:@R> => ExpressionNode::Var(
    VarNode {
        name: name.1,
        span: Some(Span { l, r }),
        global: false
    }
);

Int: ExpressionNode = {
    <l:@L> <i:"IntLiteral"> <r:@R> => ExpressionNode::Int(
        IntNode {
            value: i.1,
            span: Some(Span { l, r })
        }
    ),
};

Float: ExpressionNode = <l:@L> <f:"FloatLiteral"> <r:@R> => ExpressionNode::Float(
    FloatNode {
        value: f.1,
        span: Some(Span { l, r })
    }
);

String: ExpressionNode = {
    <l:@L> <s:"StringLiteral"> <r:@R> => {
        ExpressionNode::String(
            StringNode {
                value: s.1,
                span: Some(Span { l, r })
            }
        )
    },
    <l:@L> <s1:"StringLiteral"> <s2:String> <r:@R> => {
        match s2 {
            ExpressionNode::String(node) => {
                ExpressionNode::String(StringNode {
                    value: s1.1 + &node.value,
                    span: Some(Span { l, r })
                })
            }
            _ => unimplemented!()
        }
    },
};
