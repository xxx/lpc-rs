# The main configuration file for the the lpc-rs suite.
# If named ".env", it will be used by default when any of the binaries from the suite are
# used. A different file can be specified on the command line for any of the binaries with
# the `--config <path>` or `-c <path>` options.

# All env vars in this file can be prefixed with `LPC_` to avoid conflicts with other env vars,
# if necessary.

# Any env vars passed on the command line will override those in this file.

# What is the in-game root directory?
# Nothing above this directory is directly accessible from within the game.
# This does *not* have to be a subdirectory of the driver. It can be any
# directory in the filesystem.
LIB_DIR=./lib

# The in-game path to the Master object
# This is the second object to get created when the driver starts (simul efuns are first),
# and the one that the driver uses to communicate with directly.
# You can think of it as the Pope.
# This path is relative to `LIB_DIR`.
MASTER_OBJECT=/secure/master.c

# What address should the driver bind to?
# This is the address that the driver will listen on for telnet connections.
# By default, this listens on 0.0.0.0 (i.e. all interfaces).
# BIND_ADDRESS=127.0.0.1

# Which port to accept telnet connections on? This is the unencrypted port.
PORT=2020

# Which port to accept TLS-encrypted telnet connections on?
# Comment this out if you prefer not to deploy a TLS-enabled endpoint.
# TODO: link up instructions for setting up TLS, once they exist
# TLS_PORT = 4040

# Which directories are searched for `#include <foo.c>`-type directives?
# Directories are searched in the order given here, and the paths are in-game paths,
# rooted at, and relative to `LIB_DIR`.
#
# Multiple directories should be separated by a colon (`:`)
#
# Where applicable, the mudlib itself can also override this setting directly.
SYSTEM_INCLUDE_DIRS=/include

# Location of a file where simulated efuns live (a.k.a "simul efuns").
# These are functions that can be called from anywhere, like an efun, but are written in LPC.
# This file is relative to `LIB_DIR`.
# Remove this line, or comment it out, to disable the use of simul efuns.
# SIMUL_EFUN_FILE=/secure/simul_efun.c

# Location of a file that will be `#include`d when compiling all files.
# This file is relative to `LIB_DIR`.
# Remove this line, or comment it out, to disable its use.
# AUTO_INCLUDE_FILE=/include/auto.h

# Location of a file that will be `inherit`ed by all objects.
# This file is relative to `LIB_DIR`.
# Remove this line, or comment it out, to disable its use.
# AUTO_INHERIT_FILE=/std/auto.c

# How long can a single task run before it's terminated? The default of 300ms
# is far more than enough for reasonable tasks. Because tasks do not run on the main
# thread, a longer timeout here is ok. A "task" in this context typically starts
# with a function call, and ends when that function returns. User commands,
# object initializations, and call outs are examples of tasks.
# If not set, the default is 300ms.
# If set to 0, there is no timeout, but that is not recommended.
#
# This number is in milliseconds.
# MAX_EXECUTION_TIME=300

# How deep can inheritance chains go?
MAX_INHERIT_DEPTH=10

# The log level to use for server logs.
# This is *not* related to the user-facing compile-time and runtime error logs.
# Valid values are: "trace", "debug", "info", "warn", "error"
# If unset, the default is "info".
LOG_LEVEL=info

# The location to write the server log file to.
# This can be an absolute path, or a relative path based on the current working directory,
# or set to "STDOUT" to write to standard output.
#
# This log can potentially include sensitive information, and you should
# consider that before setting this to a file that's available in-game.
#
# If this variable is unset, the driver will write to standard output.
#
# This path _is not_ relative to `LIB_DIR`.
LOG_FILE=STDOUT

# The place to write the user-facing debug logs to.
# This file is where where writes messages that cannot be sent to anywhere else are
# written to.
# If a directory, the driver will write a separate log file each time it starts up.
# If a file, the driver will append to that file each time it starts up.
# If set to "STDOUT", the driver will write to standard output.
#
# If unset, the driver will write to standard output.
#
# This _is_ relative to `LIB_DIR`.
DEBUG_LOG_FILE=debug.log
